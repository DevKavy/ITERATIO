require('dotenv').config();
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const admin = require('firebase-admin');

const app = express();
app.use(express.json());
app.use(cors());

// Firebase Auth Setup
const serviceAccount = require('./firebaseServiceKey.json');
admin.initializeApp({ credential: admin.credential.cert(serviceAccount) });

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('🔥 MongoDB Connected'))
  .catch(err => console.error('❌ MongoDB Error:', err));

// User Model
const UserSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String,
  role: { type: String, enum: ['user', 'municipality', 'admin'], default: 'user' },
});

const User = mongoose.model('User', UserSchema);

// 🔐 Register User
app.post('/register', async (req, res) => {
  const { name, email, password, role } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ name, email, password: hashedPassword, role });
  await user.save();
  res.json({ message: 'User registered successfully' });
});

// 🔑 Login User (JWT)
app.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(400).json({ message: 'Invalid credentials' });
  }
  const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });
  res.json({ token, role: user.role });
});

// ✅ Firebase Google Auth
app.post('/auth/google', async (req, res) => {
  const { token } = req.body;
  try {
    const decodedToken = await admin.auth().verifyIdToken(token);
    let user = await User.findOne({ email: decodedToken.email });
    if (!user) {
      user = new User({ name: decodedToken.name, email: decodedToken.email, role: 'user' });
      await user.save();
    }
    const jwtToken = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.json({ token: jwtToken, role: user.role });
  } catch (error) {
    res.status(401).json({ message: 'Invalid Google token' });
  }
});

app.listen(5000, () => console.log('🚀 Server running on port 5000'));
